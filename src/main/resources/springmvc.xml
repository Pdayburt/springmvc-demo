<?xml version="1.0" encoding="UTF-8" ?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd

">
<!--    开启controller扫描-->
<context:component-scan base-package="com.lagou.edu.controller"></context:component-scan>

<!--配置视图解析器 配置视图的前后缀-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

<!--    自动注册最合适的处理器映射器，处理器适配器(调用handler) -->
    <mvc:annotation-driven conversion-service="conversionServiceBean" />

<!--    静态资源配

    方案一：

    原理：添加该标签配置后，会砸springmvc上下文中定义一个DefaultServletHttpRequestHandler对象
    这个对象如同一个检查人员 ，对进入DispatchServlet的请求进行过滤筛查 如果发现是一个静态资源请求
    那么会吧请求转有web应用服务器（tomcat）默认的DefaultServlet来处理，
    如果不是姿态资源请求那么继续有SpringMVC框架出处理
    （缺点：资源只能放在 webapp的根目录下）
-->
<!--    <mvc:default-servlet-handler></mvc:default-servlet-handler>-->

<!--    静态资源配置

        方案二：SpringMVC框架自己处理静态资源
        mapping url
        location 资源地址
        
-->
    
    <mvc:resources mapping="/resource/**" location="classpath:/"  />
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/"></mvc:resources>

<!--    注册自定义的转换器   日期的转换-->
    <bean id="conversionServiceBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters" >
            <set>
                <bean class="com.lagou.edu.DateConverter"></bean>
            </set>
        </property>
    </bean>

    <mvc:interceptors>
<!--        拦截所有handle-->
<!--        <bean id="myInterceptor" class="com.lagou.edu.interceptor.MyInterceptor"></bean>-->

<!--        拦截指定的url-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
<!--            <mvc:exclude-mapping path="/DEMO/**"/>-->
            <bean id="myInterceptor" class="com.lagou.edu.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
        
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="myInterceptor001" class="com.lagou.edu.interceptor.MyInterceptor001"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

<!--    SpringMVC的多元素解析器
        id 固定为：multipartResolver
 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!--        -1代表没有限制-->
        <property name="maxUploadSize" value="-1"></property>
    </bean>

</beans>